
### **1. DATABASE OPERATIONS**

1. **Listing All Databases**  
   ```sql
   SHOW DATABASES;
   ```

2. **Create Database**  
   ```sql
   CREATE DATABASE <DB_NAME>;
   ```

3. **Switch to a Database**  
   ```sql
   USE <DB_NAME>;
   ```

4. **Check Current Database**  
   ```sql
   SELECT DATABASE();
   ```

5. **Clear Terminal Command**  
   ```sql
   system cls;
   ```

6. **Delete a Database**  
   ```sql
   DROP DATABASE <DB_NAME>;
   ```

---

### **2. TABLE OPERATIONS**

1. **Create Table**  
   ```sql
   CREATE TABLE <TB_NAME> (
       <COL1> <DATATYPE>,
       <COL2> <DATATYPE>
   );
   ```

2. **Check Created Tables**  
   ```sql
   SHOW TABLES;
   ```

3. **Describe Table Structure**  
   ```sql
   DESC <TB_NAME>;
   ```

4. **Delete a Table**  
   ```sql
   DROP TABLE <TB_NAME>;
   ```

---

### **3. INSERTING DATA**

1. **Insert Data into Table (Specific Columns)**  
   ```sql
   INSERT INTO <TB_NAME> (<COL1>, <COL2>, <COL3>)
   VALUES (<VAL1>, <VAL2>, <VAL3>), (<VAL4>, <VAL5>, <VAL6>);
   ```

2. **Insert Data (All Columns)**  
   ```sql
   INSERT INTO <TB_NAME>
   VALUES (<VAL1>, <VAL2>, <VAL3>);
   ```

---

### **4. READING DATA**

1. **Read All Data**  
   ```sql
   SELECT * FROM <TB_NAME>;
   ```

2. **Read Specific Column**  
   ```sql
   SELECT <COL_NAME> FROM <TB_NAME>;
   ```

3. **Read Data Based on Condition**  
   ```sql
   SELECT <COL_NAME> FROM <TB_NAME> WHERE <CONDITION>;
   SELECT * FROM <TB_NAME> WHERE <CONDITION>;
   ```

---

### **5. MODIFYING TABLE STRUCTURE**

1. **Add a New Column to Table**  
   ```sql
   ALTER TABLE <TB_NAME> 
   ADD COLUMN <COL_NAME> <DATATYPE> AFTER <LOCATION>;
   ```

2. **Modify Column DataType**  
   ```sql
   ALTER TABLE <TB_NAME> 
   MODIFY COLUMN <COL_NAME> <NEW_DATATYPE>;
   ```

3. **Rename Table**  
   ```sql
   ALTER TABLE <TB_NAME> RENAME TO <NEW_TABLE_NAME>;
   ```

4. **Rename Column**  
   ```sql
   ALTER TABLE <TB_NAME> 
   RENAME COLUMN <OLD_COL_NAME> TO <NEW_COL_NAME>;
   ```

5. **Set Default Value for a Column**  
   ```sql
   ALTER TABLE <TB_NAME> 
   MODIFY <COL_NAME> <DATATYPE> DEFAULT '<DEFAULT_VAL>';
   ```

---

### **6. UPDATING DATA**

1. **Update Specific Column**  
   ```sql
   UPDATE <TB_NAME> 
   SET <COL_NAME> = <VAL> 
   WHERE <CONDITION>;
   ```

2. **Update Multiple Rows with CASE Statement**  
   ```sql
   UPDATE <TB_NAME>
   SET <COL_NAME> = CASE 
       WHEN ID = 101 THEN 'VAL1'
       WHEN ID = 102 THEN 'VAL2'
       ELSE <COL_NAME>
   END
   WHERE ID IN (101, 102);
   ```

---

### **7. DELETING DATA**

1. **Delete Data Based on Condition**  
   ```sql
   DELETE FROM <TB_NAME> WHERE <CONDITION>;
   ```

2. **Delete Rows with Null Values**  
   ```sql
   DELETE FROM <TB_NAME>
   WHERE <COL1> IS NULL AND <COL2> IS NULL;
   ```

---

### **8. PRIMARY KEYS**

1. **Check Primary Key in a Table**  
   ```sql
   SHOW INDEX FROM <TB_NAME>;
   ```

2. **Drop Primary Key**  
   ```sql
   ALTER TABLE <TB_NAME> DROP PRIMARY KEY;
   ```

3. **Add Primary Key with Auto Increment**  
   ```sql
   ALTER TABLE <TB_NAME>
   MODIFY COLUMN <COL_NAME> INT PRIMARY KEY AUTO_INCREMENT;
   ```

---

### **9. ORDERING DATA**

1. **Display Data in Descending Order**  
   ```sql
   SELECT * FROM <TB_NAME>
   ORDER BY <COL_NAME> DESC;
   ```

---

### **10. ALIAS FUNCTION**

1. **Alias for Columns**  
   ```sql
   SELECT <COL_NAME> AS <NEW_NAME> FROM <TB_NAME>;
   ```

---

### **11. STRING FUNCTIONS**

1. **Concatenation**  
   - Merge two string values:  
     ```sql
     SELECT CONCAT('<VAL1>', '<VAL2>');
     ```  
   - Merge two columns:  
     ```sql
     SELECT CONCAT(<COL1>, <COL2>) AS <ALIAS_NAME> FROM <TB_NAME>;
     ```
   - Merge columns with all data:  
     ```sql
     SELECT *, CONCAT(<COL1>, <COL2>) FROM <TB_NAME>;
     ```

2. **Concatenation with Separator (`CONCAT_WS`)**  
   - Merge two values with a separator:  
     ```sql
     SELECT CONCAT_WS('-', '<VAL1>', '<VAL2>');
     ```  
   - Merge columns with separator:  
     ```sql
     SELECT CONCAT_WS('-', <COL1>, <COL2>) FROM <TB_NAME>;
     ```
   - Display all data with concatenation:  
     ```sql
     SELECT *, CONCAT_WS('-', <COL1>, <COL2>) FROM <TB_NAME>;
     ```

3. **Substring**  
   - Extract a portion of a string:  
     ```sql
     SELECT SUBSTRING('<VAL>', <START>, <LENGTH>);
     SELECT SUBSTRING(<COL>, <POSITION>) FROM <TB_NAME>;
     ```

4. **Replace String Values**  
   ```sql
   SELECT REPLACE('<STRING>', '<CURRENT_VALUE>', '<NEW_VALUE>');
   SELECT REPLACE(<COL>, '<CURRENT_VALUE>', '<NEW_VALUE>') FROM <TB_NAME>;
   ```

5. **Reverse String**  
   ```sql
   SELECT REVERSE('<VAL>');
   SELECT *, REVERSE(<COL>) FROM <TB_NAME>;
   ```

6. **Uppercase and Lowercase**  
   ```sql
   SELECT *, UPPER(<COL>) FROM <TB_NAME>;
   SELECT *, LOWER(<COL>) FROM <TB_NAME>;
   ```

7. **String Length**  
   ```sql
   SELECT CHAR_LENGTH('<VAL>');
   SELECT *, CHAR_LENGTH(<COL>) FROM <TB_NAME>;
   ```

8. **Other String Functions**  
   - **Left and Right Substrings**:  
     ```sql
     SELECT LEFT('<VAL>', <N>);
     SELECT RIGHT('<VAL>', <N>);
     ```  
   - **Repeat a String**:  
     ```sql
     SELECT REPEAT('<VAL>', <TIMES>);
     ```  
   - **Trim Whitespace**:  
     ```sql
     SELECT TRIM('<VAL>');
     ```

---
